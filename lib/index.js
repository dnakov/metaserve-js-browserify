// Generated by CoffeeScript 1.8.0
(function() {
  var BrowserifyCompiler, Compiler, React, browserify, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  browserify = require('browserify');

  React = require('react');

  Compiler = require('metaserve/src/compiler');

  BrowserifyCompiler = (function(_super) {
    __extends(BrowserifyCompiler, _super);

    function BrowserifyCompiler() {
      return BrowserifyCompiler.__super__.constructor.apply(this, arguments);
    }

    BrowserifyCompiler.prototype.default_options = {
      base_dir: './static/js',
      ext: 'js'
    };

    BrowserifyCompiler.prototype.compile = function(coffee_filename) {
      var options;
      options = this.options;
      return (function(_this) {
        return function(req, res, next) {
          var bundler, e;
          try {
            console.log('[Browserify compiler] Going to compile ' + coffee_filename);
            bundler = browserify(options.browserify);
            if (typeof _this.beforeBundle === "function") {
              _this.beforeBundle(bundler);
            }
            return bundler.add(coffee_filename).bundle().pipe(res);
          } catch (_error) {
            e = _error;
            console.log('[Browserify compiler] ERROR ' + e);
            return res.send(500, e.toString());
          }
        };
      })(this);
    };

    return BrowserifyCompiler;

  })(Compiler);

  module.exports = function(options) {
    if (options == null) {
      options = {};
    }
    return new BrowserifyCompiler(options);
  };

  module.exports.BrowserifyCompiler = BrowserifyCompiler;

}).call(this);
